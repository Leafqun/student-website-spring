<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	 xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx
   	 					http://www.springframework.org/schema/tx/spring-tx.xsd
 						http://www.springframework.org/schema/aop 
    				    http://www.springframework.org/schema/aop/spring-aop.xsd">
	<tx:annotation-driven transaction-manager="transactionManager"/>
    <context:annotation-config/>
    <aop:config proxy-target-class="true" />
	<!-- 自动扫描 -->
	<context:component-scan base-package="cn.zjut.edu" />
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config.properties" />
	</bean>
	
	<bean id ="dataSource" class= "com.alibaba.druid.pool.DruidDataSource" destroy-method= "close"> 
          	<property name="driverClassName" value="${driver}" />
			<property name="url" value="${url}" />
			<property name="username" value="${username}" />
			<property name="password" value="${password}" />
            <property name ="filters" value="stat" /> 
            <!--    配置初始化大小、最小、最大   -->
            <property name ="initialSize" value="1" /> 
            <property name ="minIdle" value="1" />  
            <property name ="maxActive" value="20" /> 
             <!--     配置获取连接等待超时的时间   -->
            <property name ="maxWait" value="60000" /> 
             <!--     配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒   -->
            <property name= "timeBetweenEvictionRunsMillis" value ="60000" /> 
             <!--    配置一个连接在池中最小生存的时间，单位是毫秒   -->
            <property name ="minEvictableIdleTimeMillis" value= "300000" />  
            <property name ="validationQuery" value= "SELECT 'x'" />  
            <property name ="testWhileIdle" value= "true" /> 
            <property name ="testOnBorrow" value= "false" /> 
            <property name ="testOnReturn" value= "false" /> 
             <!--    打开PSCache，并且指定每个连接上PSCache的大小   -->
            <property name ="poolPreparedStatements" value= "true" />  
            <property name= "maxPoolPreparedStatementPerConnectionSize" value= "20" />   
    </bean >

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value>
							<!-- 该参数默认为false -->
							<!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
							<!-- 和startPage中的pageNum效果一样-->
							offsetAsPageNum=true
							<!-- 该参数默认为false -->
							<!-- 设置为true时，使用RowBounds分页会进行count查询 -->
							rowBoundsWithCount=true
							<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
							<!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
							pageSizeZero=true
							<!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
							<!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
							<!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
							reasonable=true
							<!-- 支持通过Mapper接口参数来传递分页参数 -->
							supportMethodsArguments=true
							<!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
							returnPageInfo=check
						</value>
					</property>
				</bean>
			</array>
		</property>
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" >
			 <list>
					<value>classpath:cn/zjut/edu/mapper/*.xml</value>
			 </list>
		</property>
	</bean>


	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.zjut.edu.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	
	<!-- Spring 与Redis 的配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxActive" value="${redis.maxActive}" />
		<property name="maxWait" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"
		p:pool-config-ref="poolConfig" />

	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>
	<!-- AutowiredAnnotationBeanPostProcessor将自动起作用，对标注的@Autowired的Bean进行自动注入 -->
	<!--<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"></bean>-->
</beans>